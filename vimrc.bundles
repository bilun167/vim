if &compatible
	set nocompatible
end

" Autoinstall vim-plug {{{
if empty(glob('~/.nvim/autoload/plug.vim'))
	silent !curl -fLo ~/.nvim/autoload/plug.vim --create-dirs
		\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall
endif
" }}}

" After a re-source, fix syntax matching issues (concealing brackets):
if exists('g:loaded_webdevicons')
    call webdevicons#refresh()
endif

call plug#begin('~/.vim/bundle')
	Plug 'rking/ag.vim'
	Plug 'terryma/vim-multiple-cursors'
	Plug 'Yggdroot/indentLine'
	"{{{
		let g:indentLine_color_term = 239
		let g:indentLine_char = '┆'
		let g:indentLine_concealcursor = 'inc'
		let g:indentLine_conceallevel = 2
	"}}}
	Plug 'MarcWeber/vim-addon-mw-utils'
	Plug 'easymotion/vim-easymotion'
	" Python stuffs
	Plug 'hynek/vim-python-pep8-indent', { 'for': 'python' }
	Plug 'klen/python-mode', { 'for': 'python' }
	" Snippets
	Plug 'garbas/vim-snipmate'
	Plug 'honza/vim-snippets'
	Plug 'Raimondi/delimitMate'
	" {{{
		let delimitMate_expand_cr = 2
		let delimitMate_expand_space = 1 " {|} => { | }
	" }}}
	" Trees & Bars
	Plug 'scrooloose/nerdtree'
	" {{{
		let g:NERDTreeMinimalUI = 1
		let g:NERDTreeHijackNetrw = 0
		let g:NERDTreeWinSize = 31
		let g:NERDTreeChDirMode = 2
		let g:NERDTreeAutoDeleteBuffer = 1
		let g:NERDTreeShowBookmarks = 1
		let g:NERDTreeCascadeOpenSingleChildDir = 1
		map <F1> :NERDTreeToggle<CR>
	" }}}
	Plug 'Xuyuanp/nerdtree-git-plugin'
	Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
	Plug 'vim-airline/vim-airline'
	"{{{
		let g:airline_powerline_fonts = 1                " Enable the list of buffers
		let g:airline#extensions#tabline#enabled = 1     " Show just the filename
		let g:airline#extensions#tabline#fnamemod = ':t' " Show buffer number
		let g:airline#extensions#tabline#buffer_nr_show = 0
		let g:airline#extensions#tmuxline#enabled = 1
		let g:airline#extensions#whitespace#enabled = 0
		let g:airline#extensions#tagbar#flags = 'f'
	"}}}
	Plug 'vim-airline/vim-airline-themes'
	Plug 'majutsushi/tagbar'
	"{{{
		let g:tagbar_autopreview = 1
	"}}}
	Plug 'scrooloose/nerdcommenter'
	Plug 'mbbill/undotree'
	Plug 'godlygeek/tabular'
	Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
	Plug 'w0ng/vim-hybrid'
	" Javascript stuffs
	Plug 'jelera/vim-javascript-syntax'
	Plug 'ternjs/tern_for_vim' "autocomplete
	Plug 'pangloss/vim-javascript'
	Plug 'mxw/vim-jsx'
	Plug 'git@github.com:zopim/vim-jxml.git'
	Plug 'elzr/vim-json'
	" CSS
	Plug 'ap/vim-css-color'
	Plug 'mattn/emmet-vim'
	" Syntax Checking
	Plug 'vim-syntastic/syntastic'
" {{{
	let g:syntastic_enable_signs          = 1
	let g:syntastic_enable_highlighting   = 1
	let g:syntastic_cpp_check_header      = 1
	let g:syntastic_enable_balloons       = 1
	let g:syntastic_echo_current_error    = 1
	let g:syntastic_check_on_wq           = 0
	let g:syntastic_error_symbol          = '✘'
	let g:syntastic_warning_symbol        = '!'
	let g:syntastic_style_error_symbol    = ':('
	let g:syntastic_style_warning_symbol  = ':('
	let g:syntastic_vim_checkers          = ['vint']
	let g:syntastic_elixir_checkers       = ['elixir']
	let g:syntastic_python_checkers       = ['flake8']
	let g:syntastic_javascript_checkers   = ['eslint']
	let g:syntastic_enable_elixir_checker = 0
" }}}
	" Tmux
	Plug 'christoomey/vim-tmux-navigator'

	Plug 'airblade/vim-gitgutter'
	" {{{
		let g:gitgutter_map_keys = 0
		let g:gitgutter_max_signs = 200
		let g:gitgutter_realtime = 1
		let g:gitgutter_eager = 1
		let g:gitgutter_sign_removed = '–'
		let g:gitgutter_diff_args = '--ignore-space-at-eol'
		nmap <silent> ]h :GitGutterNextHunk<CR>
		nmap <silent> [h :GitGutterPrevHunk<CR>
		nnoremap <silent> <Leader>gu :GitGutterRevertHunk<CR>
		nnoremap <silent> <Leader>gt :GitGutterToggle<CR>
		nnoremap <silent> <Leader>ga :GitGutterAll<CR>
		nnoremap <silent> <Leader>sh :GitGutterStageHunk
" }}}
	Plug 'esneider/YUNOcommit.vim'
	Plug 'tomtom/tlib_vim'
	Plug 'tpope/vim-fugitive'
	" {{{
  " Fix broken syntax highlight in gitcommit files
  " (https://github.com/tpope/vim-git/issues/12)
		let g:fugitive_git_executable = 'LANG=en_US.UTF-8 git'
		nnoremap <silent> <leader>gs :Gstatus<CR>
		nnoremap <silent> <leader>gd :Gdiff<CR>
		nnoremap <silent> <leader>gc :Gcommit<CR>
		nnoremap <silent> <leader>gb :Gblame<CR>
		nnoremap <silent> <leader>ge :Gedit<CR>
		nnoremap <silent> <leader>gE :Gedit<space>
		nnoremap <silent> <leader>gr :Gread<CR>
		nnoremap <silent> <leader>gR :Gread<space>
		nnoremap <silent> <leader>gw :Gwrite<CR>
		nnoremap <silent> <leader>gW :Gwrite!<CR>
		nnoremap <silent> <leader>gq :Gwq<CR>
		nnoremap <silent> <leader>gQ :Gwq!<CR>

		function! ReviewLastCommit()
			if exists('b:git_dir')
				Gtabedit HEAD^{}
				nnoremap <buffer> <silent> q :<C-U>bdelete<CR>
			else
				echo 'No git a git repository:' expand('%:p')
			endif
		endfunction
		nnoremap <silent> <leader>g` :call ReviewLastCommit()<CR>

		augroup fugitiveSettings
			autocmd!
			autocmd FileType gitcommit setlocal nolist
			autocmd BufReadPost fugitive://* setlocal bufhidden=delete
		augroup END
" }}}

	Plug 'ctrlpvim/ctrlp.vim'
	"{{{
		nnoremap <C-b> :CtrlPBuffer<CR>
		nnoremap <C-f> :CtrlPMRU<CR>
		" If a file is already open, open it again 
		"in a new pane instead of switching to the existing pane
		let g:ctrlp_switch_buffer = 'et'
		let g:ctrlp_by_filename = '1' " Look for filenames
		" Use the nearest .git directory as the cwd
		" This makes a lot of sense if you are working on a project that is in version
		" control. It also supports works with .svn, .hg, .bzr.
		let g:ctrlp_working_path_mode = 'r'

		" Ignore files
		set wildignore+=*/tmp/*,*.so,*.swp,*.zip
		" let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
		let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
		" let g:ctrlp_user_command = 'find %s -type f'
		let g:ctrlp_match_window = 'order:ttb,max:20'
		let g:ctrlp_custom_ignore = {
			\ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
			\ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
		\}
	"}}}
	" CTags
	Plug 'szw/vim-tags'
	Plug 'craigemery/vim-autotag'
	" Load devicons before ctrlp https://github.com/ryanoasis/vim-devicons/issues/183
	" Load devicons after NERDTree, airline, ctrlP
	Plug 'ryanoasis/vim-devicons'
	"{{{
		let g:webdevicons_enable = 1
		let g:WebDevIconsOS = 'Darwin'
		let g:webdevicons_enable_nerdtree = 1           " add flags to NERDTree
		let g:webdevicons_enable_airline_tabline = 1    " add to airline's tabline
		let g:webdevicons_enable_airline_statusline = 1 " add to airline's statusline
		let g:webdevicons_enable_ctrlp = 1              " ctrlp glyphs
		let g:WebDevIconsUnicodeDecorateFileNodes = 1   " file node glyph decorations
		let g:WebDevIconsUnicodeDecorateFolderNodes = 1
		let g:DevIconsEnableFoldersOpenClose = 1
		let g:WebDevIconsUnicodeGlyphDoubleWidth = 1    " only manipulates padding
		let g:webdevicons_conceal_nerdtree_brackets = 0 " show nerdtree brackets around flags
		let g:WebDevIconsNerdTreeAfterGlyphPadding = '' " the amount of space to use after the glyph character (default ' ')
		let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1 " Force extra padding in NERDTree so that the filetype icons line up vertically 
	"}}}
	Plug 'moll/vim-bbye'    " Buffer bye
	Plug 'tpope/vim-eunuch' " Vim sugar for the UNIX shell commands
	Plug 'artur-shaik/vim-javacomplete2'
	Plug 'janko-m/vim-test'
	" {{{
		function! TerminalSplitStrategy(cmd) abort
			tabnew | call termopen(a:cmd) | startinsert
		endfunction
		let g:test#custom_strategies = get(g:, 'test#custom_strategies', {})
		let g:test#custom_strategies.terminal_split = function('TerminalSplitStrategy')
		let test#strategy = 'terminal_split'

		nnoremap <silent> <leader>rc :TestFile<CR>
		nnoremap <silent> <leader>rf :TestNearest<CR>
		nnoremap <silent> <leader>rs :TestSuite<CR>
		nnoremap <silent> <leader>rl :TestLast<CR>
		nnoremap <silent> <leader>rv :TestVisit<CR>
	" }}}

	if filereadable(expand("~/.vimrc.bundles.local"))
		source ~/.vimrc.bundles.local
	endif
call plug#end()
